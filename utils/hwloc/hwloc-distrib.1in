.\" -*- nroff -*-
.\" Copyright © 2010-2018 Inria.  All rights reserved.
.\" Copyright © 2009-2010 Cisco Systems, Inc.  All rights reserved.
.\" See COPYING in top-level directory.
.TH HWLOC-DISTRIB "1" "%HWLOC_DATE%" "%PACKAGE_VERSION%" "%PACKAGE_NAME%"
.SH NAME
hwloc-distrib \- Build a number of cpu masks for a type of object, distributed on the system with a policy.
.
.\" **************************
.\"    Synopsis Section
.\" **************************
.SH SYNOPSIS
.B hwloc-distrib \fIround-robin\fR \fI<type>\fR [\fIoptions\fR]

.B hwloc-distrib \fIscatter\fR \fI<type>\fR [\fIoptions\fR]

.B hwloc-distrib \fI<type>:...:<type>\fR [\fIoptions\fR]
.\" **************************
.\"    Options Section
.\" **************************
.SH OPTIONS
.TP
\fB\-\-single\fR
Singlify each output to a single CPU.
.TP
\fB\-\-taskset\fR
Show CPU set strings in the format recognized by the taskset command-line
program instead of hwloc-specific CPU set string format.
.TP
\fB\-\-logical-index\fR
Show logical index of distributed objects instead of CPU set format.
.TP
\fB\-\-physical-index\fR
Show OS index of distributed objects instead of CPU set format.
.TP
\fB\-v\fR \fB\-\-verbose\fR
Verbose messages.
.TP
\fB\-i\fR <file>, \fB\-\-input\fR <file>
Read topology from XML file <file> (instead of discovering the
topology on the local machine).  If <file> is "\-", the standard input
is used.  XML support must have been compiled in to hwloc for this
option to be usable.
.TP
\fB\-i\fR <directory>, \fB\-\-input\fR <directory>
Read topology from <directory> instead of discovering the topology
of the local machine.
On Linux, the directory may contain the topology files
gathered from another machine topology with hwloc-gather-topology.
On x86, the directory may contain a cpuid dump gathered
with hwloc-gather-cpuid.
.TP
\fB\-i\fR <specification>, \fB\-\-input\fR <specification>
Simulate a fake hierarchy (instead of discovering the topology on the
local machine). If <specification> is "node:2 pu:3", the topology will
contain two NUMA nodes with 3 processing units in each of them.
The <specification> string must end with a number of PUs.
.TP
\fB\-\-if\fR <format>, \fB\-\-input\-format\fR <format>
Enforce the input in the given format, among \fBxml\fR, \fBfsroot\fR,
\fBcpuid\fR and \fBsynthetic\fR.
.TP
\fB\-\-ignore\fR <type>
Ignore all objects of type <type> in the topology.
.TP
\fB\-\-from\fR <integer>
Distribute starting from objects with this logical index.
.TP
\fB\-n\fR <integer>
Distribute this amount of objects. If integer is larger than the
number of objects to distribute, the distribution will cycle.
.TP
\fB\-\-reverse\fR
Reverse distribution order provided by the policy.
.TP
\fB\-\-shuffle\fR
Randomize distribution.
With round-robin policy, the whole distribution is randomized.
With scatter and custom policies, the policy is preserved but the index
inside levels is shuffled.
.TP
\fB\-\-restrict\fR <cpuset>
Restrict the topology to the given cpuset.
.TP
\fB\-\-disallowed\fR
Include objects disallowed by administrative limitations.
.TP
\fB\-\-version\fR
Report version and exit.
.TP
\fB\-h\fR \fB\-\-help\fR
Display help message and exit.
.
.\" **************************
.\"    Description Section
.\" **************************
.SH DESCRIPTION
.
hwloc-distrib generates a series of CPU masks corresponding to a distribution of
a given number of elements over the topology of the machine. The distribution
is done recursively from the last level argument to the first level argument.
Round-robin policy is equivalent to distribute from the leaves to the root.
Scatter policy is equivalent to distribute from the root to the leaves.
Leaves are the type of object output by hwloc-distrib.
Leaves of round-robin and scatter policies are set in <type> argument.
Leaves are the deepest objects in the list of provided levels <type>:...:<type>
when using a custom policy.
.
.PP
This can e.g. be used to distribute a set of processes hierarchically according
to the topology of a machine. These masks can be used with hwloc-bind(1).
.
.PP
.B NOTE:
It is highly recommended that you read the hwloc(7) overview page
before reading this man page.  Most of the concepts described in
hwloc(7) directly apply to the hwloc-bind utility.
.
.\" **************************
.\"    Examples Section
.\" **************************
.SH EXAMPLES
.PP
hwloc-distrib's operation is best described through several examples.
.
.PP
If 4 processes have to be distributed across a machine and bound to a single
package each, their CPU masks may be obtained with:

    $ hwloc-distrib scatter package -n 4
    0x00ff00ff
    0xff00ff00
    0x00ff00ff
    0xff00ff00
    
To distribute only among the second package, the topology should be restricted:

    $ hwloc-distrib scatter pu -n 4 --restrict $(hwloc-calc package:1)
    0xff00ff00
    0xff00ff00
    0xff00ff00
    0xff00ff00

To get a single processor of each CPU masks (prevent migration in case
of binding)

    $ hwloc-distrib scatter pu -n 4
    0x00000001
    0x00000100
    0x00000002
    0x00000200

Each output line may be converted independently with hwloc-calc:

    $ hwloc-distrib scatter pu -n 4 | hwloc-calc --taskset
    0x1
    0x100
    0x2
    0x200

To convert the output into a list of processors that may be passed to
dplace -c inside a mpirun command line:

    $ hwloc-distrib scatter pu -n 4 | xargs hwloc-calc --pulist
    0,2,16,18
.
.
.\" **************************
.\"    Return value section
.\" **************************
.SH RETURN VALUE
Upon successful execution, hwloc-distrib displays one or more CPU mask
strings.  The return value is 0.
.
.
.PP
hwloc-distrib will return nonzero if any kind of error occurs, such as
(but not limited to) failure to parse the command line.
.
.\" **************************
.\"    See also section
.\" **************************
.SH SEE ALSO
.
.ft R
hwloc(7)
.sp
